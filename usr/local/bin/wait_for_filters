#!/bin/sh

# Check if the filters are ready for another reload (as indicated by the
# filter status register bits 0 and 4). If the filters aren't ready,
# send some data through them until they are.
# To get data through, use streamtonowhered. Note however that this
# will overwrite any previous transient capture data, so ensure that
# this data is safely stored elsewhere before runing this script
#
# For improved efficiency when loading multiple filters, start at stream to
# nowhere before running this script, and then pass "nospawn" as the first
# argument to the script. This will bypass spawning a new streamtonowhered
# process

wait_until_filter_ready () {
    filter_status=$(set.site 14 FILTER_STATUS)
    voltage_ready=$((0x${filter_status}&0x1))
    power_ready=$(((0x${filter_status}&0x10)>>4))
    if [ $voltage_ready -eq 0 -o $power_ready -eq 0 ]
    then
        if [ "$1" != "nospawn" ]
        then
            streamtonowhered start
            # Wait until armed
            # Can't use wait_until_state 1 here, because it's not a transient capture
            until set.site 0 transient_state | grep -qe "^1"
            do
                sleep 0.1
            done
            soft_trigger
        fi
        # Poll until the filters are ready
        while true
        do
            filter_status=$(set.site 14 FILTER_STATUS)
            voltage_ready=$((0x${filter_status}&0x1))
            power_ready=$(((0x${filter_status}&0x10)>>4))
            if [ $voltage_ready -eq 1 -a $power_ready -eq 1 ]
            then
                break
            else
                sleep 0.5
            fi
        done
        [ "$1" != "nospawn" ] && streamtonowhered stop
    fi
}

wait_until_filter_ready $1
