#!/bin/sh

# Check if the filters are ready for another reload (as indicated by the
# filter status register bits 0 and 4). If the filters aren't ready,
# send some data through them until they are.
# To get data through, use streamtonowhered. Note however that this
# will overwrite any previous transient capture data, so ensure that
# this data is safely stored elsewhere before runing this script
#
# For improved efficiency when loading multiple filters, start at stream to
# nowhere before running this script, and then pass "nospawn" as the first
# argument to the script. This will bypass spawning a new streamtonowhered
# process

wait_until_filter_ready () {
    filter_status=$(set.site 14 FILTER_STATUS)
    voltage_ready=$((0x${filter_status}&0x1))
    power_ready=$(((0x${filter_status}&0x10)>>4))
    if [ $voltage_ready -eq 0 -o $power_ready -eq 0 ]
    then
        if [ "$1" != "nospawn" ]
        then
            # Start running data through the filters so we can load multiple power filters
            # Need to ensure that the system is set up to trigger automatically for this
            sysconf_file="/etc/sysconfig/acq400_streamd.0.conf"
            cp "$sysconf_file" "$sysconf_file"-before_wait_for_filters
            cp /usr/local/CARE/acq400_streamd.0.conf-soft_trigger "$sysconf_file"

            streamtonowhered start
        fi
        # Poll until the filters are ready
        while true
        do
            filter_status=$(set.site 14 FILTER_STATUS)
            voltage_ready=$((0x${filter_status}&0x1))
            power_ready=$(((0x${filter_status}&0x10)>>4))
            if [ $voltage_ready -eq 1 -a $power_ready -eq 1 ]
            then
                break
            else
                sleep 0.5
            fi
        done
        if [ "$1" != "nospawn" ]; then
            streamtonowhered stop
            mv "$sysconf_file"-before_wait_for_filters "$sysconf_file"
        fi
    fi
}

wait_until_filter_ready $1
